#!/bin/sh
#-- wireshark for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ wireshark.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2013 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.wireshark.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=wireshark
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.10.4}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

grep --quiet '^wireshark:' /etc/group && SB_HGROUP=1

PYSITELIB=$(python -c 'from distutils import sysconfig; print sysconfig.get_python_lib()')

# Set to YES to enable krb support
SB_KRB5=${SB_KRB5:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.wireshark.org/download/src/${SRCARCHIVE}"
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URLB="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

sed -i -e '/^Version=/d;/^Icon=/s|\.png||g' \
           ${NAME}.desktop || exit 1

sed -i \
  -e "s|/lib\"|/lib${LIBDIRSUFFIX}\"|g" \
  -e "s|_dir/lib |_dir/lib${LIBDIRSUFFIX} |g" \
  -e 's|-DGTK_DISABLE_DEPRECATED ||g' \
  configure || exit 1

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  sed -i \
    -e "s|\${withval}/lib)|\${withval}/lib${LIBDIRSUFFIX})|g" \
    -e 's|-DGTK_DISABLE_DEPRECATED ||g' \
    configure.ac || exit 1
  sh ./autogen.sh || exit $?
fi

unset SB_KRB5OPTS
[ "${SB_KRB5}" = "YES" ] && SB_KRB5OPTS=yes

case "${ARCH}" in
  s390)  export PIECFLAGS="-fPIE" ;;
  *)     export PIECFLAGS="-fpie" ;;
esac

export CPPFLAGS="$(pkg-config --cflags lua) ${CPPFLAGS}"
export CFLAGS="${SLKCFLAGS} ${CPPFLAGS} ${PIECFLAGS} -D_LARGEFILE64_SOURCE"
export CXXFLAGS="${SLKCFLAGS} ${CPPFLAGS} ${PIECFLAGS} -D_LARGEFILE64_SOURCE"
export LDFLAGS="${LDFLAGS} -pie"

./configure \
  --prefix=/usr \
  --bindir=/usr/sbin \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --with-zlib \
  --enable-ipv6 \
  --with-gnu-ld \
  --disable-static \
  --disable-usr-local \
  --with-pic \
  --with-adns \
  --with-geoip \
  --with-gnutls \
  --with-libnl=3 \
  --with-lua \
  --with-portaudio=no \
  --enable-airpcap \
  --with-gtk3 \
  --disable-warnings-as-errors \
  --with-dumpcap-group="wireshark" \
  --with-krb5=${SB_KRB5OPTS:-no} \
  --with-plugins=/usr/lib${LIBDIRSUFFIX}/${NAME}/plugins/${VERSION} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

#remove rpath
sed -i 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=""|g' libtool
sed -i 's|^runpath_var=LD_RUN_PATH|runpath_var=DIE_RPATH_DIE|g' libtool

make -j${NJOBS} || make || exit 1

# The evil plugins hack
sed -i -e 's|-L../../epan|-L../../epan/.libs|' plugins/*/*.la

make DESTDIR=${PKG} install || exit 1

#symlink tshark to tethereal
ln -s tshark ${PKG}/usr/sbin/tethereal || exit 1

# Install python stuff.
mkdir -p ${PKG}/${PYSITELIB}
install -m 644 tools/wireshark_be.py tools/wireshark_gen.py \
               ${PKG}/${PYSITELIB}/ || exit 1

# Remove .la files
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/plugins/${VERSION}/*.la
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/*.la

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# add wspy_dissectors directory for plugins
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/python/${VERSION}/wspy_dissectors

#install devel files (inspired by debian/wireshark-dev.header-files)
mkdir -p 0755 ${PKG}/usr/include/${NAME}
IDIR="${PKG}/usr/include/${NAME}"
mkdir -p "${IDIR}/epan"
mkdir -p "${IDIR}/epan/crypt"
mkdir -p "${IDIR}/epan/ftypes"
mkdir -p "${IDIR}/epan/dfilter"
mkdir -p "${IDIR}/epan/dissectors"
mkdir -p "${IDIR}/wiretap"
mkdir -p "${IDIR}/wsutil"
install -m 644 color.h config.h register.h "${IDIR}/" || exit 1
install -m 644 cfile.h file.h "${IDIR}/" || exit 1
install -m 644 packet-range.h print.h "${IDIR}/" || exit 1
install -m 644 epan/*.h "${IDIR}/epan/" || exit 1
install -m 644 epan/crypt/*.h "${IDIR}/epan/crypt" || exit 1
install -m 644 epan/ftypes/*.h "${IDIR}/epan/ftypes" || exit 1
install -m 644 epan/dfilter/*.h "${IDIR}/epan/dfilter" || exit 1
install -m 644 epan/dissectors/*.h "${IDIR}/epan/dissectors" || exit 1
install -m 644 wiretap/*.h "${IDIR}/wiretap" || exit 1
install -m 644 wsutil/*.h "${IDIR}/wsutil" || exit 1

#	Create pkg-config control file.
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/${NAME}.pc <<EOF
prefix=/usr
exec_prefix=/usr
libdir=/usr/lib${LIBDIRSUFFIX}
includedir=/usr/include

Name: ${NAME}
Description: Network Traffic Analyzer
Version: ${VERSION}
Requires:	glib-2.0 gmodule-2.0
Libs: -L${libdir} -lwireshark -lwiretap
Cflags: -DWS_VAR_IMPORT=extern -DHAVE_STDARG_H -DWS_MSVC_NORETURN= -I\${includedir}/wireshark -I\${includedir}/${NAME}/epan
EOF

#	Install the autoconf macro.
mkdir -p ${PKG}/usr/share/aclocal
install -pm0644 ${CWD}/${NAME}-autoconf.m4 ${PKG}/usr/share/aclocal/${NAME}.m4 || exit 1

mkdir -p ${PKG}/usr/share/applications
desktop-file-install --vendor "" \
  --remove-key "TryExec" \
  --set-key "Exec" \
  --set-value "/usr/sbin/${NAME} %f" \
  --dir ${PKG}/usr/share/applications \
  ${NAME}.desktop || exit 1

for res in 16 32 48 64 256 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -m0644 image/wsicon${res}.png \
    ${dir}/${NAME}.png
done
mkdir -p ${PKG}/usr/share/icons/hicolor/scalable/apps
install -m0644 image/wsicon.svg \
  ${PKG}/usr/share/icons/hicolor/scalable/apps/${NAME}.svg || exit 1

for res in 16 24 32 48 64 128 256 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/mimetypes
  mkdir -p ${dir}
  install -m0644 image/WiresharkDoc-${res}.png \
    ${dir}/application-x-pcap.png
done

mkdir -p ${PKG}/usr/share/mime/packages
install -m 644 ${CWD}/${NAME}-mime-package.xml \
  ${PKG}/usr/share/mime/packages/${NAME}.xml || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING NEWS README* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^wireshark:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
    -g $(free_group_id) \
    wireshark
fi

setcaps () {
  if ${CHROOT} /sbin/setcap "${1}" "${3}" 2>/dev/null; then
    ${CHROOT} /bin/chmod "${2}" "${3}"
  fi
}

${CHROOT} /bin/chown root.wireshark /usr/sbin/dumpcap
${CHROOT} /bin/chmod 4750 /usr/sbin/dumpcap

setcaps 'cap_net_raw,cap_net_admin=ep' 'u-s' /usr/sbin/dumpcap

if [ -x usr/bin/update-desktop-database ]; then
  ${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/update-mime-database ]; then
  ${CHROOT} /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  ${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor > /dev/null 2>&1
  ${CHROOT} /usr/bin/gtk-update-icon-cache -q /usr/share/icons/hicolor > /dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}-autoconf.m4 ${CWD}/${NAME}-mime-package.xml \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.wireshark ./usr/sbin/dumpcap ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chmod 4750 ./usr/sbin/dumpcap ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
