#!/bin/sh
#-- squid for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ squid.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2013 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.squid-cache.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=squid
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.4.1}
SVER=$( echo ${VERSION} | cut -d . -f1-2 )
SSVER=$( echo ${VERSION} | cut -d . -f1 )
# Put changesets, eg.: 20 50 1075 (0 or "" to disable)
PVER=${PVER:-"0"}
[ "${PVER}" = "" ] && PVER=0
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable internal dns
SB_INTDNS=${SB_INTDNS:-YES}
# Set to YES to enable ipv6
SB_IPV6=${SB_IPV6:-NO}
# Set to YES to enable krb gssapi
SB_KRB5=${SB_KRB5:-YES}
# Set to YES to enable pam support
SB_PAM=${SB_PAM:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOWNDIR=${CWD}/patches/updates

grep --quiet '^squid:' /etc/group && SB_HGROUP=1
grep --quiet '^squid:' /etc/passwd && SB_HUSER=1

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.squid-cache.org/Versions/v3/${SVER}"
PDL_URL="http://www.squid-cache.org/Versions/v3/${SVER}/changesets"
PDL_URL2="http://www.squid-cache.org/Versions/v3/HEAD/changesets"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${PVER}" != "0" ] ;then
  mkdir -p ${DOWNDIR}
  ( cd ${DOWNDIR} || exit 1
    for i in ${PVER} ; do
      file=${NAME}-${SVER}-${i}.patch
      file2=${NAME}-${SSVER}-${i}.patch
      test -r ${file} || ${DL_PROG} ${DL_OPTS} ${PDL_URL}/${file} \
        || ( test -r ${file2} || ${DL_PROG} ${DL_OPTS} ${PDL_URL2}/${file2} ) || exit 1
    done
  ) || exit $?
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
  LFOPTS=""
else
  LIBDIRSUFFIX=""
  LFOPTS="--with-large-files"
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

iconv -f ISO88591 -t UTF8 ChangeLog -o ChangeLog.tmp
mv -f ChangeLog.tmp ChangeLog

sed -i -e "/SSLLIBDIR=/s|with_openssl/lib\"|with_openssl/lib${LIBDIRSUFFIX}\"|g" \
  configure.ac || exit 1

unset SB_INTDNSOPTS SB_IPV6OPTS SB_KRB5OPTS SB_PAMOPTS
[ "${SB_INTDNS}" = "YES" ] || SB_INTDNSOPTS="--disable-internal-dns"
[ "${SB_IPV6}" = "YES" ] || SB_IPV6OPTS="--disable-ipv6"
[ "${SB_KRB5}" = "YES" ] && SB_KRB5OPTS=yes
[ "${SB_PAM}" = "YES" ] && SB_PAMOPTS=",PAM"

export CFLAGS="-fPIC $(echo ${SLKCFLAGS} | sed -e 's/-O./-Os/') -g -pipe -fsigned-char -D_FORTIFY_SOURCE=2"
export LDFLAGS="-pie ${LDFLAGS}"
export CXXFLAGS="-fPIE ${SLKCFLAGS} -D_FORTIFY_SOURCE=2"

acver="$(autoconf --version | head -n1 | awk '{print $4}')" \
amver="$(automake --version | head -n1 | awk '{print $4}')" \
ltver="$(libtool --version | head -n1 | awk '{print $4}')" \
sh ./bootstrap.sh || exit 1

./configure \
  --prefix=/usr \
  --exec_prefix=/usr \
  --bindir=/usr/sbin \
  --libexecdir=/usr/lib${LIBDIRSUFFIX}/squid \
  --localstatedir=/var \
  --datadir=/usr/share/squid \
  --sysconfdir=/etc/squid \
  --with-logdir='$(localstatedir)/log/squid' \
  --with-pidfile='$(localstatedir)/run/squid.pid' \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-dependency-tracking \
  --enable-eui \
  --enable-follow-x-forwarded-for \
  --enable-auth \
  --enable-auth-basic="DB,LDAP,MSNT,MSNT-multi-domain,NCSA,NIS,POP3,RADIUS,SASL,SMB,getpwnam${SB_PAMOPTS}" \
  --enable-auth-ntlm="smb_lm,fake" \
  --enable-auth-digest="file,LDAP,eDirectory" \
  --enable-external-acl-helpers="file_userip,LDAP_group,time_quota,session,unix_group,wbinfo_group" \
  --enable-cache-digests \
  --enable-cachemgr-hostname=localhost \
  --enable-delay-pools \
  --enable-epoll \
  --enable-icap-client \
  --enable-ident-lookups ${LFOPTS} \
  --enable-linux-netfilter \
  --enable-removal-policies="heap,lru" \
  --enable-snmp \
  --enable-ssl \
  --enable-ssl-crtd \
  --enable-storeio="aufs,diskd,ufs" \
  --enable-wccpv2 \
  --enable-ecap \
  --with-aio \
  --with-default-user="squid" \
  --with-filedescriptors=16384 \
  --with-dl \
  --with-openssl=/usr \
  --with-pthreads ${SB_INTDNSOPTS} ${SB_IPV6OPTS} \
  --disable-strict-error-checking \
  --with-krb5-config=${SB_KRB5OPTS:-no} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} DEFAULT_SWAP_DIR='$(localstatedir)/spool/squid' LIBTOOL=/usr/bin/libtool || make DEFAULT_SWAP_DIR='$(localstatedir)/spool/squid' LIBTOOL=/usr/bin/libtool || exit $?

make install DESTDIR=${PKG} LIBTOOL=/usr/bin/libtool || exit $?

rmdir -p ${PKG}/usr/lib ${PKG}/usr/include

mkdir -p ${PKG}/usr/libexec/squid
install -pm0755 ${CWD}/cache_swap.sh ${PKG}/usr/libexec/squid/ || exit 1

mkdir -p ${PKG}/etc/logrotate.d
zcat ${CWD}/${NAME}.logrotate.gz \
  > ${PKG}/etc/logrotate.d/squid.new || exit 1

mkdir -p ${PKG}/etc/httpd/extra/
cat > ${PKG}/etc/httpd/extra/${NAME}.conf.new <<EOF
#
# This is /etc/httpd/extra/squid.conf
#

ScriptAlias /Squid/cgi-bin/cachemgr.cgi /usr/lib${LIBDIRSUFFIX}/squid/cachemgr.cgi

# Only allow access from localhost by default
<Location /Squid/cgi-bin/cachemgr.cgi>
 Require local
 # Add additional allowed hosts as needed
 # Require host example.com
</Location>
EOF

mkdir -p ${PKG}/var/log/squid ${PKG}/var/spool/squid
chmod 0750 ${PKG}/var/log/squid ${PKG}/var/spool/squid

mkdir -p ${PKG}/etc/rc.d
install -m0755 ${CWD}/rc.${NAME} ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/${NAME}.new <<'EOF'|| exit 1
# default squid options
SQUID_OPTS=""

# Time to wait for Squid to shut down when asked. Should not be necessary
# most of the time.
SQUID_SHUTDOWN_TIMEOUT=100

# default squid conf file
SQUID_CONF="/etc/squid/squid.conf"
EOF

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${NAME}.gz \
  > ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/${NAME}.service ${PKG}/lib/systemd/system/ || exit 1

# remove unpackaged files from the buildroot
rm -f ${PKG}/usr/sbin/{RunAccel,RunCache}
rm -f ${PKG}/squid.httpd.tmp

rmdir ${PKG}/etc/squid/squid

rm -f ${PKG}/etc/squid/squid.conf.documented

chmod 640 ${PKG}/etc/squid/squid.conf
chmod 644 ${PKG}/etc/squid/cachemgr.conf

( cd ${PKG}/etc/squid
  for f in squid.conf errorpage.css cachemgr.conf msntauth.conf mime.conf ;do
    mv ${f} ${f}.new || exit 1
  done
) || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Move the MIB definition to the proper place (and name)
mkdir -p ${PKG}/usr/share/snmp/mibs
mv ${PKG}/usr/share/squid/mib.txt ${PKG}/usr/share/snmp/mibs/SQUID-MIB.txt || exit 1

mkdir -p ${PKG}/etc/NetworkManager/dispatcher.d
cat > ${PKG}/etc/NetworkManager/dispatcher.d/20-squid <<'EOF'
#!/bin/sh

case "$2" in
        up|down|vpn-up|vpn-down)
                /bin/systemctl try-restart squid.service > /dev/null 2>/dev/null || test -x /etc/rc.d/rc.squid && /etc/rc.d/rc.squid condrestart || :
                ;;
esac
EOF
chmod 0755 ${PKG}/etc/NetworkManager/dispatcher.d/20-squid

if [ "${SB_PAM}" = "YES" ] ;then
  mkdir -p ${PKG}/etc/pam.d
  cat > ${PKG}/etc/pam.d/${NAME}.new <<'EOF'
#%PAM-1.0
auth		include		password-auth
account		include		password-auth
EOF
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README QUICKSTART src/squid.conf.documented ${CWD}/ChangeLog.SB \
  contrib/{url-normalizer.pl,rredir.*,user-agents.pl} \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

GROUP_ID=23
# Set up group.
if ! grep --quiet '^squid:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g ${GROUP_ID} \
            squid 2> /dev/null
fi
# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^squid:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/var/spool/squid:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  if test "${OLD_USER}" = "squid"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
            -d '/var/spool/squid' \
            -u ${USER_ID} \
            -s /bin/false \
            -g squid \
            ${OLD_USER} 2> /dev/null
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
            -u ${GROUP_ID} \
            -g squid \
            -s /bin/false \
            -d '/var/spool/squid' \
            squid 2> /dev/null
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.${NAME} -a -r etc/rc.d/rc.${NAME}.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions
${CHROOT} /bin/chown root.squid /etc/squid/squid.conf
${CHROOT} /bin/chown root.squid /etc/squid/cachemgr.conf

${CHROOT} /bin/chown squid.squid /var/log/squid
${CHROOT} /bin/chmod 0750 /var/log/squid
${CHROOT} /bin/chown squid.squid /var/spool/squid
${CHROOT} /bin/chmod 0750 /var/spool/squid

for i in /var/log/squid /var/spool/squid ; do
  if [ -d ${i} ] ; then
    for adir in $(find $i -maxdepth 0 \! -user squid); do
      ${CHROOT} chown -R squid.squid ${adir}
    done
  fi
done

if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi

EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/cache_swap.sh ${CWD}/rc.* ${CWD}/setup.*.rc*.gz \
    ${CWD}/${NAME}.logrotate.gz ${CWD}/${NAME}.service ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.squid ./etc/squid/{cachemgr,squid}.conf* ;
  [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown squid.squid ./var/{log,spool}/squid ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0

